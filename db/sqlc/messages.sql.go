// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: messages.sql

package db

import (
	"context"
)

const countMessages = `-- name: CountMessages :one
SELECT count(*) FROM messages
`

func (q *Queries) CountMessages(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMessages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    user_id,
    to_phone_number,
    content
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, user_id, to_phone_number, created_at, content
`

type CreateMessageParams struct {
	UserID        string `json:"userID"`
	ToPhoneNumber string `json:"toPhoneNumber"`
	Content       string `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.UserID, arg.ToPhoneNumber, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ToPhoneNumber,
		&i.CreatedAt,
		&i.Content,
	)
	return i, err
}

const getMessageByToPhoneNumber = `-- name: GetMessageByToPhoneNumber :many
SELECT id, user_id, to_phone_number, created_at, content FROM messages
WHERE to_phone_number = $1
`

func (q *Queries) GetMessageByToPhoneNumber(ctx context.Context, toPhoneNumber string) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessageByToPhoneNumber, toPhoneNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ToPhoneNumber,
			&i.CreatedAt,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageByUser = `-- name: GetMessageByUser :many
SELECT id, user_id, to_phone_number, created_at, content FROM messages
WHERE user_id = $1
`

func (q *Queries) GetMessageByUser(ctx context.Context, userID string) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessageByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ToPhoneNumber,
			&i.CreatedAt,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
